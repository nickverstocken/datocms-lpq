/* eslint-disable */
import * as types from './graphql';
import { TypedDocumentNode as DocumentNode } from '@graphql-typed-document-node/core';

/**
 * Map of all GraphQL operations in the project.
 *
 * This map has several performance disadvantages:
 * 1. It is not tree-shakeable, so it will include all operations in the project.
 * 2. It is not minifiable, so the string of a GraphQL query will be multiple times inside the bundle.
 * 3. It does not support dead code elimination, so it will add unused operations.
 *
 * Therefore it is highly recommended to use the babel or swc plugin for production.
 */
const documents = {
    "query Page($locale: SiteLocale, $fallbackLocale: [SiteLocale!], $slug: String) {\n  page(\n    filter: {slug: {eq: $slug}}\n    locale: $locale\n    fallbackLocales: $fallbackLocale\n  ) {\n    seo: _seoMetaTags {\n      attributes\n      content\n      tag\n    }\n    sections {\n      ... on RecordInterface {\n        id\n        __typename\n      }\n      ... on AboutIntroRecord {\n        ...AboutIntro\n      }\n      ... on ChangelogSectionRecord {\n        ...ChangelogSection\n      }\n      ... on StatsSectionRecord {\n        ...StatsSection\n      }\n      ... on TeamSectionRecord {\n        displayOptions\n        ...TeamSection\n      }\n      ... on FaqSectionRecord {\n        displayOptions\n        ...FaqSection\n      }\n      ... on HeroSectionRecord {\n        displayOptions\n        ...HeroSection\n      }\n      ... on VideoSectionRecord {\n        ...VideoSection\n      }\n      ... on DetailSectionRecord {\n        ...DetailSection\n      }\n      ... on ReviewSectionRecord {\n        displayOptions\n        ...ReviewSection\n      }\n      ... on PricingSectionRecord {\n        displayOption\n        ...PricingSection\n      }\n      ... on BrandSectionRecord {\n        displayOptions\n        ...BrandSection\n      }\n      ... on FeaturedPostsSectionRecord {\n        displayOptions\n        ...FeaturedPostsSection\n      }\n      ... on FeatureListSectionRecord {\n        displayOption\n        ...FeatureListSection\n      }\n      ... on RedirectSectionRecord {\n        slugToRedirectTo\n      }\n    }\n    id\n    label\n    __typename\n  }\n  allPosts(\n    filter: {title: {isBlank: \"false\"}}\n    orderBy: _createdAt_DESC\n    first: \"9\"\n    locale: $locale\n    fallbackLocales: $fallbackLocale\n  ) {\n    id\n    ...PostExcerpt\n  }\n  _allPostsMeta(locale: $locale, filter: {title: {isBlank: \"false\"}}) {\n    count\n  }\n}": types.PageDocument,
    "query PageStaticParams {\n  allPages {\n    slug\n  }\n}": types.PageStaticParamsDocument,
    "query Changelog($slug: String) {\n  changeLog(filter: {slug: {eq: $slug}}) {\n    seo: _seoMetaTags {\n      attributes\n      content\n      tag\n    }\n    timeOfRelease\n    versionName\n    slug\n    content {\n      value\n    }\n  }\n}": types.ChangelogDocument,
    "query Legal($slug: String, $locale: SiteLocale, $fallbackLocale: [SiteLocale!]) {\n  legalPage(\n    filter: {slug: {eq: $slug}}\n    locale: $locale\n    fallbackLocales: $fallbackLocale\n  ) {\n    seo: _seoMetaTags {\n      attributes\n      content\n      tag\n    }\n    content {\n      value\n    }\n  }\n}": types.LegalDocument,
    "query Post($slug: String, $locale: SiteLocale, $fallbackLocale: [SiteLocale!]) {\n  post(\n    filter: {slug: {eq: $slug}, title: {isBlank: \"false\"}}\n    locale: $locale\n    fallbackLocales: $fallbackLocale\n  ) {\n    seo: _seoMetaTags {\n      attributes\n      content\n      tag\n    }\n    _publishedAt\n    title\n    author {\n      name\n      bio\n      slug\n      picture {\n        responsiveImage(imgixParams: {w: \"64\", h: \"64\", fit: crop}) {\n          ...DatoImage_responsiveImage\n        }\n      }\n    }\n    tags {\n      id\n      tag\n      slug\n    }\n    content {\n      value\n      links {\n        ... on RecordInterface {\n          id\n          __typename\n        }\n        _publishedAt\n        slug\n        title\n        tags {\n          tag\n        }\n        seoTags {\n          description\n          image {\n            responsiveImage {\n              ...DatoImage_responsiveImage\n            }\n          }\n        }\n        author {\n          name\n          bio\n          picture {\n            responsiveImage(imgixParams: {w: \"64\", h: \"64\", fit: crop}) {\n              ...DatoImage_responsiveImage\n            }\n          }\n        }\n      }\n      blocks {\n        ... on RecordInterface {\n          id\n          __typename\n        }\n        ... on ImageBlockRecord {\n          image {\n            id\n            responsiveImage {\n              ...DatoImage_responsiveImage\n            }\n          }\n        }\n        ... on AppCtaRecord {\n          ...CtaAppBlock\n        }\n        ... on NewsletterSubscriptionRecord {\n          ...NewsletterSubscription\n        }\n        ... on CtaButtonWithImageRecord {\n          ...CtaButtonWithImage\n        }\n      }\n    }\n  }\n}": types.PostDocument,
    "query PostStaticParams {\n  allPosts(\n    filter: {title: {isBlank: \"false\"}}\n    orderBy: _createdAt_DESC\n    first: 9\n  ) {\n    slug\n  }\n}": types.PostStaticParamsDocument,
    "query Author($slug: String, $locale: SiteLocale, $fallbackLocale: [SiteLocale!], $skip: IntType = \"0\") {\n  author(filter: {slug: {eq: $slug}}, locale: $locale) {\n    seo: _seoMetaTags {\n      attributes\n      content\n      tag\n    }\n    name\n    picture {\n      responsiveImage {\n        ...DatoImage_responsiveImage\n      }\n    }\n    bio\n    description\n    _allReferencingPosts(\n      filter: {title: {isBlank: \"false\"}}\n      orderBy: _createdAt_DESC\n      first: 100\n      locale: $locale\n      fallbackLocales: $fallbackLocale\n      skip: $skip\n    ) {\n      id\n      ...PostExcerpt\n    }\n    _allReferencingPostsMeta(locale: $locale, filter: {title: {isBlank: \"false\"}}) {\n      count\n    }\n  }\n}": types.AuthorDocument,
    "query Posts($locale: SiteLocale, $fallbackLocale: [SiteLocale!], $skip: IntType = \"0\") {\n  allPosts(\n    filter: {title: {isBlank: \"false\"}}\n    orderBy: _createdAt_DESC\n    first: 9\n    locale: $locale\n    fallbackLocales: $fallbackLocale\n    skip: $skip\n  ) {\n    id\n    ...PostExcerpt\n  }\n  _allPostsMeta(locale: $locale, filter: {title: {isBlank: \"false\"}}) {\n    count\n  }\n}": types.PostsDocument,
    "query Tag($slug: String, $locale: SiteLocale, $fallbackLocale: [SiteLocale!], $skip: IntType = \"0\") {\n  tag(filter: {slug: {eq: $slug}}, locale: $locale) {\n    seo: _seoMetaTags {\n      attributes\n      content\n      tag\n    }\n    tag\n    _allReferencingPosts(\n      filter: {title: {isBlank: \"false\"}}\n      orderBy: _createdAt_DESC\n      first: 100\n      locale: $locale\n      fallbackLocales: $fallbackLocale\n      skip: $skip\n    ) {\n      id\n      ...PostExcerpt\n    }\n    _allReferencingPostsMeta(locale: $locale, filter: {title: {isBlank: \"false\"}}) {\n      count\n    }\n  }\n}": types.TagDocument,
    "query CommonLayout($locale: SiteLocale, $fallbackLocale: [SiteLocale!]) {\n  layout(locale: $locale, fallbackLocales: $fallbackLocale) {\n    logo {\n      url\n      responsiveImage {\n        ...DatoImage_responsiveImage\n      }\n    }\n    menu {\n      ... on MenuItemRecord {\n        id\n        title\n        __typename\n        page {\n          slug\n        }\n      }\n      ... on MenuDropdownRecord {\n        id\n        title\n        __typename\n        items {\n          ... on MenuItemRecord {\n            id\n            title\n            __typename\n            page {\n              slug\n            }\n          }\n        }\n      }\n    }\n    footerSubtitle\n    footerLogo {\n      url\n      height\n      width\n    }\n    socialMediaLinks {\n      url\n      name\n      id\n      icon {\n        url\n        height\n        width\n      }\n    }\n    footerLinks {\n      ... on LegalPageRecord {\n        id\n        slug\n        title\n        id\n      }\n    }\n  }\n  _site {\n    locales\n  }\n}": types.CommonLayoutDocument,
    "query DocumentationPage($slug: String, $locale: SiteLocale, $fallbackLocale: [SiteLocale!]) {\n  documentationPage(\n    filter: {slug: {eq: $slug}}\n    locale: $locale\n    fallbackLocales: $fallbackLocale\n  ) {\n    seo: _seoMetaTags {\n      attributes\n      content\n      tag\n    }\n    title\n    __typename\n    id\n    content {\n      value\n    }\n  }\n}": types.DocumentationPageDocument,
    "query DocumentationHomePage {\n  documentationHome {\n    seo: _seoMetaTags {\n      attributes\n      content\n      tag\n    }\n    title\n    subheader\n    ...FeaturedDocumentationPages\n  }\n}": types.DocumentationHomePageDocument,
    "query DocumentationSidebar {\n  allDocumentationPages(filter: {parent: {exists: \"false\"}}) {\n    children {\n      title\n      subtitle\n      slug\n      id\n      __typename\n      content {\n        value\n      }\n      children {\n        title\n        subtitle\n        slug\n        id\n        __typename\n        content {\n          value\n        }\n        children {\n          title\n          subtitle\n          slug\n          id\n          __typename\n          content {\n            value\n          }\n          children {\n            title\n            subtitle\n            slug\n            id\n            __typename\n            content {\n              value\n            }\n          }\n        }\n      }\n    }\n    title\n    subtitle\n    slug\n    id\n    __typename\n  }\n  documentationHome {\n    footerText\n    logo {\n      url\n      width\n      height\n    }\n  }\n}": types.DocumentationSidebarDocument,
    "query Layout {\n  _site {\n    faviconMetaTags {\n      attributes\n      content\n      tag\n    }\n  }\n  layout {\n    mainColor {\n      red\n      blue\n      green\n    }\n  }\n}": types.LayoutDocument,
    "query Locales {\n  _site {\n    locales\n  }\n}": types.LocalesDocument,
    "fragment DatoImage_responsiveImage on ResponsiveImage {\n  src\n  srcSet\n  base64\n  width\n  height\n  alt\n  title\n}": types.DatoImage_ResponsiveImageFragmentDoc,
    "fragment FeaturedDocumentationPages on DocumentationHomeRecord {\n  featuredPages {\n    id\n    ...FeaturedDocumentationPagesPreviewCard\n  }\n}\n\nfragment FeaturedDocumentationPagesPreviewCard on DocumentationPageRecord {\n  title\n  subtitle\n  slug\n}": types.FeaturedDocumentationPagesFragmentDoc,
    "fragment PostExcerpt on PostRecord {\n  _publishedAt\n  slug\n  id\n  title\n  tags {\n    tag\n  }\n  seoTags {\n    description\n    image {\n      responsiveImage {\n        ...DatoImage_responsiveImage\n      }\n    }\n  }\n  author {\n    name\n    bio\n    slug\n    picture {\n      responsiveImage(imgixParams: {w: \"64\", h: \"64\", fit: crop}) {\n        ...DatoImage_responsiveImage\n      }\n    }\n  }\n}": types.PostExcerptFragmentDoc,
    "fragment AboutIntro on AboutIntroRecord {\n  preHeader\n  header\n  subheader\n  introductionText {\n    value\n  }\n  images {\n    id\n    responsiveImage {\n      ...DatoImage_responsiveImage\n    }\n  }\n}": types.AboutIntroFragmentDoc,
    "fragment CtaAppBlock on AppCtaRecord {\n  text\n  title\n  googlePlayUrl\n  appstoreUrl\n}": types.CtaAppBlockFragmentDoc,
    "fragment BrandSection on BrandSectionRecord {\n  displayOptions\n  brand {\n    __typename\n    brandName\n    brandUrl\n    id\n    brandLogo {\n      url\n    }\n  }\n}": types.BrandSectionFragmentDoc,
    "fragment ChangelogSection on ChangelogSectionRecord {\n  subtitle\n  title\n  featuredVersions {\n    timeOfRelease\n    versionName\n    slug\n    id\n    __typename\n  }\n}": types.ChangelogSectionFragmentDoc,
    "fragment CtaButtonWithImage on CtaButtonWithImageRecord {\n  title\n  subtitle\n  image {\n    id\n    responsiveImage {\n      ...DatoImage_responsiveImage\n    }\n  }\n  buttonLabel\n}": types.CtaButtonWithImageFragmentDoc,
    "fragment DetailSection on DetailSectionRecord {\n  details {\n    value\n  }\n  imagePosition\n  image {\n    responsiveImage {\n      ...DatoImage_responsiveImage\n    }\n  }\n}": types.DetailSectionFragmentDoc,
    "fragment FaqSection on FaqSectionRecord {\n  displayOptions\n  title\n  subtitle\n  questions {\n    question\n    id\n    answer {\n      value\n    }\n  }\n}": types.FaqSectionFragmentDoc,
    "fragment FeatureListSection on FeatureListSectionRecord {\n  featuresHeader\n  featuresSubheader\n  displayOption\n  feature {\n    __typename\n    id\n    featureTitle\n    featureDescription\n    featureIcon {\n      responsiveImage {\n        ...DatoImage_responsiveImage\n      }\n    }\n  }\n}": types.FeatureListSectionFragmentDoc,
    "fragment FeaturedPostsSection on FeaturedPostsSectionRecord {\n  featuredPostsHeader\n  featuredPostsSubheader\n  displayOptions\n  featuredPosts {\n    id\n    ...PostExcerpt\n  }\n}": types.FeaturedPostsSectionFragmentDoc,
    "fragment HeroSection on HeroSectionRecord {\n  buttons {\n    id\n    label\n    primary\n    url\n  }\n  heroSubtitle\n  heroTitle\n  displayOptions\n  heroImage {\n    responsiveImage {\n      ...DatoImage_responsiveImage\n    }\n  }\n}": types.HeroSectionFragmentDoc,
    "fragment NewsletterSubscription on NewsletterSubscriptionRecord {\n  buttonLabel\n  subtitle\n  title\n}": types.NewsletterSubscriptionFragmentDoc,
    "fragment PricingSection on PricingSectionRecord {\n  pricingSectionHeader\n  pricingSectionSubheader\n  displayOption\n  plans {\n    id\n    yearlyPrice\n    monthlyPrice\n    tierName\n    tierDescription {\n      value\n    }\n    slug\n    planFeatures\n  }\n}": types.PricingSectionFragmentDoc,
    "fragment ReviewSection on ReviewSectionRecord {\n  reviewSectionHeader\n  reviewSectionSubheader\n  displayOptions\n  reviews {\n    id\n    ...Testimonial\n  }\n}\n\nfragment Testimonial on TestimonialRecord {\n  id\n  rating\n  review {\n    value\n  }\n  reviewerName\n  reviewerPicture {\n    responsiveImage {\n      ...DatoImage_responsiveImage\n    }\n  }\n  reviewerTitle\n}": types.ReviewSectionFragmentDoc,
    "fragment StatsSection on StatsSectionRecord {\n  title\n  subtitle\n  statistic {\n    id\n    label\n    quantity\n    icon {\n      url\n    }\n  }\n}": types.StatsSectionFragmentDoc,
    "fragment TeamSection on TeamSectionRecord {\n  displayOptions\n  title\n  subtitle\n  showcasedMembers {\n    name\n    id\n    slug\n    bio\n    description\n    picture {\n      responsiveImage {\n        ...DatoImage_responsiveImage\n      }\n    }\n  }\n}": types.TeamSectionFragmentDoc,
    "fragment VideoSection on VideoSectionRecord {\n  videoHeader\n  videoSubheader\n  video {\n    providerUid\n    provider\n    thumbnailUrl\n  }\n  videoThumbnail {\n    responsiveImage {\n      ...DatoImage_responsiveImage\n    }\n  }\n}": types.VideoSectionFragmentDoc,
};

/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 *
 *
 * @example
 * ```ts
 * const query = graphql(`query GetUser($id: ID!) { user(id: $id) { name } }`);
 * ```
 *
 * The query argument is unknown!
 * Please regenerate the types.
 */
export function graphql(source: string): unknown;

/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query Page($locale: SiteLocale, $fallbackLocale: [SiteLocale!], $slug: String) {\n  page(\n    filter: {slug: {eq: $slug}}\n    locale: $locale\n    fallbackLocales: $fallbackLocale\n  ) {\n    seo: _seoMetaTags {\n      attributes\n      content\n      tag\n    }\n    sections {\n      ... on RecordInterface {\n        id\n        __typename\n      }\n      ... on AboutIntroRecord {\n        ...AboutIntro\n      }\n      ... on ChangelogSectionRecord {\n        ...ChangelogSection\n      }\n      ... on StatsSectionRecord {\n        ...StatsSection\n      }\n      ... on TeamSectionRecord {\n        displayOptions\n        ...TeamSection\n      }\n      ... on FaqSectionRecord {\n        displayOptions\n        ...FaqSection\n      }\n      ... on HeroSectionRecord {\n        displayOptions\n        ...HeroSection\n      }\n      ... on VideoSectionRecord {\n        ...VideoSection\n      }\n      ... on DetailSectionRecord {\n        ...DetailSection\n      }\n      ... on ReviewSectionRecord {\n        displayOptions\n        ...ReviewSection\n      }\n      ... on PricingSectionRecord {\n        displayOption\n        ...PricingSection\n      }\n      ... on BrandSectionRecord {\n        displayOptions\n        ...BrandSection\n      }\n      ... on FeaturedPostsSectionRecord {\n        displayOptions\n        ...FeaturedPostsSection\n      }\n      ... on FeatureListSectionRecord {\n        displayOption\n        ...FeatureListSection\n      }\n      ... on RedirectSectionRecord {\n        slugToRedirectTo\n      }\n    }\n    id\n    label\n    __typename\n  }\n  allPosts(\n    filter: {title: {isBlank: \"false\"}}\n    orderBy: _createdAt_DESC\n    first: \"9\"\n    locale: $locale\n    fallbackLocales: $fallbackLocale\n  ) {\n    id\n    ...PostExcerpt\n  }\n  _allPostsMeta(locale: $locale, filter: {title: {isBlank: \"false\"}}) {\n    count\n  }\n}"): (typeof documents)["query Page($locale: SiteLocale, $fallbackLocale: [SiteLocale!], $slug: String) {\n  page(\n    filter: {slug: {eq: $slug}}\n    locale: $locale\n    fallbackLocales: $fallbackLocale\n  ) {\n    seo: _seoMetaTags {\n      attributes\n      content\n      tag\n    }\n    sections {\n      ... on RecordInterface {\n        id\n        __typename\n      }\n      ... on AboutIntroRecord {\n        ...AboutIntro\n      }\n      ... on ChangelogSectionRecord {\n        ...ChangelogSection\n      }\n      ... on StatsSectionRecord {\n        ...StatsSection\n      }\n      ... on TeamSectionRecord {\n        displayOptions\n        ...TeamSection\n      }\n      ... on FaqSectionRecord {\n        displayOptions\n        ...FaqSection\n      }\n      ... on HeroSectionRecord {\n        displayOptions\n        ...HeroSection\n      }\n      ... on VideoSectionRecord {\n        ...VideoSection\n      }\n      ... on DetailSectionRecord {\n        ...DetailSection\n      }\n      ... on ReviewSectionRecord {\n        displayOptions\n        ...ReviewSection\n      }\n      ... on PricingSectionRecord {\n        displayOption\n        ...PricingSection\n      }\n      ... on BrandSectionRecord {\n        displayOptions\n        ...BrandSection\n      }\n      ... on FeaturedPostsSectionRecord {\n        displayOptions\n        ...FeaturedPostsSection\n      }\n      ... on FeatureListSectionRecord {\n        displayOption\n        ...FeatureListSection\n      }\n      ... on RedirectSectionRecord {\n        slugToRedirectTo\n      }\n    }\n    id\n    label\n    __typename\n  }\n  allPosts(\n    filter: {title: {isBlank: \"false\"}}\n    orderBy: _createdAt_DESC\n    first: \"9\"\n    locale: $locale\n    fallbackLocales: $fallbackLocale\n  ) {\n    id\n    ...PostExcerpt\n  }\n  _allPostsMeta(locale: $locale, filter: {title: {isBlank: \"false\"}}) {\n    count\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query PageStaticParams {\n  allPages {\n    slug\n  }\n}"): (typeof documents)["query PageStaticParams {\n  allPages {\n    slug\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query Changelog($slug: String) {\n  changeLog(filter: {slug: {eq: $slug}}) {\n    seo: _seoMetaTags {\n      attributes\n      content\n      tag\n    }\n    timeOfRelease\n    versionName\n    slug\n    content {\n      value\n    }\n  }\n}"): (typeof documents)["query Changelog($slug: String) {\n  changeLog(filter: {slug: {eq: $slug}}) {\n    seo: _seoMetaTags {\n      attributes\n      content\n      tag\n    }\n    timeOfRelease\n    versionName\n    slug\n    content {\n      value\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query Legal($slug: String, $locale: SiteLocale, $fallbackLocale: [SiteLocale!]) {\n  legalPage(\n    filter: {slug: {eq: $slug}}\n    locale: $locale\n    fallbackLocales: $fallbackLocale\n  ) {\n    seo: _seoMetaTags {\n      attributes\n      content\n      tag\n    }\n    content {\n      value\n    }\n  }\n}"): (typeof documents)["query Legal($slug: String, $locale: SiteLocale, $fallbackLocale: [SiteLocale!]) {\n  legalPage(\n    filter: {slug: {eq: $slug}}\n    locale: $locale\n    fallbackLocales: $fallbackLocale\n  ) {\n    seo: _seoMetaTags {\n      attributes\n      content\n      tag\n    }\n    content {\n      value\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query Post($slug: String, $locale: SiteLocale, $fallbackLocale: [SiteLocale!]) {\n  post(\n    filter: {slug: {eq: $slug}, title: {isBlank: \"false\"}}\n    locale: $locale\n    fallbackLocales: $fallbackLocale\n  ) {\n    seo: _seoMetaTags {\n      attributes\n      content\n      tag\n    }\n    _publishedAt\n    title\n    author {\n      name\n      bio\n      slug\n      picture {\n        responsiveImage(imgixParams: {w: \"64\", h: \"64\", fit: crop}) {\n          ...DatoImage_responsiveImage\n        }\n      }\n    }\n    tags {\n      id\n      tag\n      slug\n    }\n    content {\n      value\n      links {\n        ... on RecordInterface {\n          id\n          __typename\n        }\n        _publishedAt\n        slug\n        title\n        tags {\n          tag\n        }\n        seoTags {\n          description\n          image {\n            responsiveImage {\n              ...DatoImage_responsiveImage\n            }\n          }\n        }\n        author {\n          name\n          bio\n          picture {\n            responsiveImage(imgixParams: {w: \"64\", h: \"64\", fit: crop}) {\n              ...DatoImage_responsiveImage\n            }\n          }\n        }\n      }\n      blocks {\n        ... on RecordInterface {\n          id\n          __typename\n        }\n        ... on ImageBlockRecord {\n          image {\n            id\n            responsiveImage {\n              ...DatoImage_responsiveImage\n            }\n          }\n        }\n        ... on AppCtaRecord {\n          ...CtaAppBlock\n        }\n        ... on NewsletterSubscriptionRecord {\n          ...NewsletterSubscription\n        }\n        ... on CtaButtonWithImageRecord {\n          ...CtaButtonWithImage\n        }\n      }\n    }\n  }\n}"): (typeof documents)["query Post($slug: String, $locale: SiteLocale, $fallbackLocale: [SiteLocale!]) {\n  post(\n    filter: {slug: {eq: $slug}, title: {isBlank: \"false\"}}\n    locale: $locale\n    fallbackLocales: $fallbackLocale\n  ) {\n    seo: _seoMetaTags {\n      attributes\n      content\n      tag\n    }\n    _publishedAt\n    title\n    author {\n      name\n      bio\n      slug\n      picture {\n        responsiveImage(imgixParams: {w: \"64\", h: \"64\", fit: crop}) {\n          ...DatoImage_responsiveImage\n        }\n      }\n    }\n    tags {\n      id\n      tag\n      slug\n    }\n    content {\n      value\n      links {\n        ... on RecordInterface {\n          id\n          __typename\n        }\n        _publishedAt\n        slug\n        title\n        tags {\n          tag\n        }\n        seoTags {\n          description\n          image {\n            responsiveImage {\n              ...DatoImage_responsiveImage\n            }\n          }\n        }\n        author {\n          name\n          bio\n          picture {\n            responsiveImage(imgixParams: {w: \"64\", h: \"64\", fit: crop}) {\n              ...DatoImage_responsiveImage\n            }\n          }\n        }\n      }\n      blocks {\n        ... on RecordInterface {\n          id\n          __typename\n        }\n        ... on ImageBlockRecord {\n          image {\n            id\n            responsiveImage {\n              ...DatoImage_responsiveImage\n            }\n          }\n        }\n        ... on AppCtaRecord {\n          ...CtaAppBlock\n        }\n        ... on NewsletterSubscriptionRecord {\n          ...NewsletterSubscription\n        }\n        ... on CtaButtonWithImageRecord {\n          ...CtaButtonWithImage\n        }\n      }\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query PostStaticParams {\n  allPosts(\n    filter: {title: {isBlank: \"false\"}}\n    orderBy: _createdAt_DESC\n    first: 9\n  ) {\n    slug\n  }\n}"): (typeof documents)["query PostStaticParams {\n  allPosts(\n    filter: {title: {isBlank: \"false\"}}\n    orderBy: _createdAt_DESC\n    first: 9\n  ) {\n    slug\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query Author($slug: String, $locale: SiteLocale, $fallbackLocale: [SiteLocale!], $skip: IntType = \"0\") {\n  author(filter: {slug: {eq: $slug}}, locale: $locale) {\n    seo: _seoMetaTags {\n      attributes\n      content\n      tag\n    }\n    name\n    picture {\n      responsiveImage {\n        ...DatoImage_responsiveImage\n      }\n    }\n    bio\n    description\n    _allReferencingPosts(\n      filter: {title: {isBlank: \"false\"}}\n      orderBy: _createdAt_DESC\n      first: 100\n      locale: $locale\n      fallbackLocales: $fallbackLocale\n      skip: $skip\n    ) {\n      id\n      ...PostExcerpt\n    }\n    _allReferencingPostsMeta(locale: $locale, filter: {title: {isBlank: \"false\"}}) {\n      count\n    }\n  }\n}"): (typeof documents)["query Author($slug: String, $locale: SiteLocale, $fallbackLocale: [SiteLocale!], $skip: IntType = \"0\") {\n  author(filter: {slug: {eq: $slug}}, locale: $locale) {\n    seo: _seoMetaTags {\n      attributes\n      content\n      tag\n    }\n    name\n    picture {\n      responsiveImage {\n        ...DatoImage_responsiveImage\n      }\n    }\n    bio\n    description\n    _allReferencingPosts(\n      filter: {title: {isBlank: \"false\"}}\n      orderBy: _createdAt_DESC\n      first: 100\n      locale: $locale\n      fallbackLocales: $fallbackLocale\n      skip: $skip\n    ) {\n      id\n      ...PostExcerpt\n    }\n    _allReferencingPostsMeta(locale: $locale, filter: {title: {isBlank: \"false\"}}) {\n      count\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query Posts($locale: SiteLocale, $fallbackLocale: [SiteLocale!], $skip: IntType = \"0\") {\n  allPosts(\n    filter: {title: {isBlank: \"false\"}}\n    orderBy: _createdAt_DESC\n    first: 9\n    locale: $locale\n    fallbackLocales: $fallbackLocale\n    skip: $skip\n  ) {\n    id\n    ...PostExcerpt\n  }\n  _allPostsMeta(locale: $locale, filter: {title: {isBlank: \"false\"}}) {\n    count\n  }\n}"): (typeof documents)["query Posts($locale: SiteLocale, $fallbackLocale: [SiteLocale!], $skip: IntType = \"0\") {\n  allPosts(\n    filter: {title: {isBlank: \"false\"}}\n    orderBy: _createdAt_DESC\n    first: 9\n    locale: $locale\n    fallbackLocales: $fallbackLocale\n    skip: $skip\n  ) {\n    id\n    ...PostExcerpt\n  }\n  _allPostsMeta(locale: $locale, filter: {title: {isBlank: \"false\"}}) {\n    count\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query Tag($slug: String, $locale: SiteLocale, $fallbackLocale: [SiteLocale!], $skip: IntType = \"0\") {\n  tag(filter: {slug: {eq: $slug}}, locale: $locale) {\n    seo: _seoMetaTags {\n      attributes\n      content\n      tag\n    }\n    tag\n    _allReferencingPosts(\n      filter: {title: {isBlank: \"false\"}}\n      orderBy: _createdAt_DESC\n      first: 100\n      locale: $locale\n      fallbackLocales: $fallbackLocale\n      skip: $skip\n    ) {\n      id\n      ...PostExcerpt\n    }\n    _allReferencingPostsMeta(locale: $locale, filter: {title: {isBlank: \"false\"}}) {\n      count\n    }\n  }\n}"): (typeof documents)["query Tag($slug: String, $locale: SiteLocale, $fallbackLocale: [SiteLocale!], $skip: IntType = \"0\") {\n  tag(filter: {slug: {eq: $slug}}, locale: $locale) {\n    seo: _seoMetaTags {\n      attributes\n      content\n      tag\n    }\n    tag\n    _allReferencingPosts(\n      filter: {title: {isBlank: \"false\"}}\n      orderBy: _createdAt_DESC\n      first: 100\n      locale: $locale\n      fallbackLocales: $fallbackLocale\n      skip: $skip\n    ) {\n      id\n      ...PostExcerpt\n    }\n    _allReferencingPostsMeta(locale: $locale, filter: {title: {isBlank: \"false\"}}) {\n      count\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query CommonLayout($locale: SiteLocale, $fallbackLocale: [SiteLocale!]) {\n  layout(locale: $locale, fallbackLocales: $fallbackLocale) {\n    logo {\n      url\n      responsiveImage {\n        ...DatoImage_responsiveImage\n      }\n    }\n    menu {\n      ... on MenuItemRecord {\n        id\n        title\n        __typename\n        page {\n          slug\n        }\n      }\n      ... on MenuDropdownRecord {\n        id\n        title\n        __typename\n        items {\n          ... on MenuItemRecord {\n            id\n            title\n            __typename\n            page {\n              slug\n            }\n          }\n        }\n      }\n    }\n    footerSubtitle\n    footerLogo {\n      url\n      height\n      width\n    }\n    socialMediaLinks {\n      url\n      name\n      id\n      icon {\n        url\n        height\n        width\n      }\n    }\n    footerLinks {\n      ... on LegalPageRecord {\n        id\n        slug\n        title\n        id\n      }\n    }\n  }\n  _site {\n    locales\n  }\n}"): (typeof documents)["query CommonLayout($locale: SiteLocale, $fallbackLocale: [SiteLocale!]) {\n  layout(locale: $locale, fallbackLocales: $fallbackLocale) {\n    logo {\n      url\n      responsiveImage {\n        ...DatoImage_responsiveImage\n      }\n    }\n    menu {\n      ... on MenuItemRecord {\n        id\n        title\n        __typename\n        page {\n          slug\n        }\n      }\n      ... on MenuDropdownRecord {\n        id\n        title\n        __typename\n        items {\n          ... on MenuItemRecord {\n            id\n            title\n            __typename\n            page {\n              slug\n            }\n          }\n        }\n      }\n    }\n    footerSubtitle\n    footerLogo {\n      url\n      height\n      width\n    }\n    socialMediaLinks {\n      url\n      name\n      id\n      icon {\n        url\n        height\n        width\n      }\n    }\n    footerLinks {\n      ... on LegalPageRecord {\n        id\n        slug\n        title\n        id\n      }\n    }\n  }\n  _site {\n    locales\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query DocumentationPage($slug: String, $locale: SiteLocale, $fallbackLocale: [SiteLocale!]) {\n  documentationPage(\n    filter: {slug: {eq: $slug}}\n    locale: $locale\n    fallbackLocales: $fallbackLocale\n  ) {\n    seo: _seoMetaTags {\n      attributes\n      content\n      tag\n    }\n    title\n    __typename\n    id\n    content {\n      value\n    }\n  }\n}"): (typeof documents)["query DocumentationPage($slug: String, $locale: SiteLocale, $fallbackLocale: [SiteLocale!]) {\n  documentationPage(\n    filter: {slug: {eq: $slug}}\n    locale: $locale\n    fallbackLocales: $fallbackLocale\n  ) {\n    seo: _seoMetaTags {\n      attributes\n      content\n      tag\n    }\n    title\n    __typename\n    id\n    content {\n      value\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query DocumentationHomePage {\n  documentationHome {\n    seo: _seoMetaTags {\n      attributes\n      content\n      tag\n    }\n    title\n    subheader\n    ...FeaturedDocumentationPages\n  }\n}"): (typeof documents)["query DocumentationHomePage {\n  documentationHome {\n    seo: _seoMetaTags {\n      attributes\n      content\n      tag\n    }\n    title\n    subheader\n    ...FeaturedDocumentationPages\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query DocumentationSidebar {\n  allDocumentationPages(filter: {parent: {exists: \"false\"}}) {\n    children {\n      title\n      subtitle\n      slug\n      id\n      __typename\n      content {\n        value\n      }\n      children {\n        title\n        subtitle\n        slug\n        id\n        __typename\n        content {\n          value\n        }\n        children {\n          title\n          subtitle\n          slug\n          id\n          __typename\n          content {\n            value\n          }\n          children {\n            title\n            subtitle\n            slug\n            id\n            __typename\n            content {\n              value\n            }\n          }\n        }\n      }\n    }\n    title\n    subtitle\n    slug\n    id\n    __typename\n  }\n  documentationHome {\n    footerText\n    logo {\n      url\n      width\n      height\n    }\n  }\n}"): (typeof documents)["query DocumentationSidebar {\n  allDocumentationPages(filter: {parent: {exists: \"false\"}}) {\n    children {\n      title\n      subtitle\n      slug\n      id\n      __typename\n      content {\n        value\n      }\n      children {\n        title\n        subtitle\n        slug\n        id\n        __typename\n        content {\n          value\n        }\n        children {\n          title\n          subtitle\n          slug\n          id\n          __typename\n          content {\n            value\n          }\n          children {\n            title\n            subtitle\n            slug\n            id\n            __typename\n            content {\n              value\n            }\n          }\n        }\n      }\n    }\n    title\n    subtitle\n    slug\n    id\n    __typename\n  }\n  documentationHome {\n    footerText\n    logo {\n      url\n      width\n      height\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query Layout {\n  _site {\n    faviconMetaTags {\n      attributes\n      content\n      tag\n    }\n  }\n  layout {\n    mainColor {\n      red\n      blue\n      green\n    }\n  }\n}"): (typeof documents)["query Layout {\n  _site {\n    faviconMetaTags {\n      attributes\n      content\n      tag\n    }\n  }\n  layout {\n    mainColor {\n      red\n      blue\n      green\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query Locales {\n  _site {\n    locales\n  }\n}"): (typeof documents)["query Locales {\n  _site {\n    locales\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "fragment DatoImage_responsiveImage on ResponsiveImage {\n  src\n  srcSet\n  base64\n  width\n  height\n  alt\n  title\n}"): (typeof documents)["fragment DatoImage_responsiveImage on ResponsiveImage {\n  src\n  srcSet\n  base64\n  width\n  height\n  alt\n  title\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "fragment FeaturedDocumentationPages on DocumentationHomeRecord {\n  featuredPages {\n    id\n    ...FeaturedDocumentationPagesPreviewCard\n  }\n}\n\nfragment FeaturedDocumentationPagesPreviewCard on DocumentationPageRecord {\n  title\n  subtitle\n  slug\n}"): (typeof documents)["fragment FeaturedDocumentationPages on DocumentationHomeRecord {\n  featuredPages {\n    id\n    ...FeaturedDocumentationPagesPreviewCard\n  }\n}\n\nfragment FeaturedDocumentationPagesPreviewCard on DocumentationPageRecord {\n  title\n  subtitle\n  slug\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "fragment PostExcerpt on PostRecord {\n  _publishedAt\n  slug\n  id\n  title\n  tags {\n    tag\n  }\n  seoTags {\n    description\n    image {\n      responsiveImage {\n        ...DatoImage_responsiveImage\n      }\n    }\n  }\n  author {\n    name\n    bio\n    slug\n    picture {\n      responsiveImage(imgixParams: {w: \"64\", h: \"64\", fit: crop}) {\n        ...DatoImage_responsiveImage\n      }\n    }\n  }\n}"): (typeof documents)["fragment PostExcerpt on PostRecord {\n  _publishedAt\n  slug\n  id\n  title\n  tags {\n    tag\n  }\n  seoTags {\n    description\n    image {\n      responsiveImage {\n        ...DatoImage_responsiveImage\n      }\n    }\n  }\n  author {\n    name\n    bio\n    slug\n    picture {\n      responsiveImage(imgixParams: {w: \"64\", h: \"64\", fit: crop}) {\n        ...DatoImage_responsiveImage\n      }\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "fragment AboutIntro on AboutIntroRecord {\n  preHeader\n  header\n  subheader\n  introductionText {\n    value\n  }\n  images {\n    id\n    responsiveImage {\n      ...DatoImage_responsiveImage\n    }\n  }\n}"): (typeof documents)["fragment AboutIntro on AboutIntroRecord {\n  preHeader\n  header\n  subheader\n  introductionText {\n    value\n  }\n  images {\n    id\n    responsiveImage {\n      ...DatoImage_responsiveImage\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "fragment CtaAppBlock on AppCtaRecord {\n  text\n  title\n  googlePlayUrl\n  appstoreUrl\n}"): (typeof documents)["fragment CtaAppBlock on AppCtaRecord {\n  text\n  title\n  googlePlayUrl\n  appstoreUrl\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "fragment BrandSection on BrandSectionRecord {\n  displayOptions\n  brand {\n    __typename\n    brandName\n    brandUrl\n    id\n    brandLogo {\n      url\n    }\n  }\n}"): (typeof documents)["fragment BrandSection on BrandSectionRecord {\n  displayOptions\n  brand {\n    __typename\n    brandName\n    brandUrl\n    id\n    brandLogo {\n      url\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "fragment ChangelogSection on ChangelogSectionRecord {\n  subtitle\n  title\n  featuredVersions {\n    timeOfRelease\n    versionName\n    slug\n    id\n    __typename\n  }\n}"): (typeof documents)["fragment ChangelogSection on ChangelogSectionRecord {\n  subtitle\n  title\n  featuredVersions {\n    timeOfRelease\n    versionName\n    slug\n    id\n    __typename\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "fragment CtaButtonWithImage on CtaButtonWithImageRecord {\n  title\n  subtitle\n  image {\n    id\n    responsiveImage {\n      ...DatoImage_responsiveImage\n    }\n  }\n  buttonLabel\n}"): (typeof documents)["fragment CtaButtonWithImage on CtaButtonWithImageRecord {\n  title\n  subtitle\n  image {\n    id\n    responsiveImage {\n      ...DatoImage_responsiveImage\n    }\n  }\n  buttonLabel\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "fragment DetailSection on DetailSectionRecord {\n  details {\n    value\n  }\n  imagePosition\n  image {\n    responsiveImage {\n      ...DatoImage_responsiveImage\n    }\n  }\n}"): (typeof documents)["fragment DetailSection on DetailSectionRecord {\n  details {\n    value\n  }\n  imagePosition\n  image {\n    responsiveImage {\n      ...DatoImage_responsiveImage\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "fragment FaqSection on FaqSectionRecord {\n  displayOptions\n  title\n  subtitle\n  questions {\n    question\n    id\n    answer {\n      value\n    }\n  }\n}"): (typeof documents)["fragment FaqSection on FaqSectionRecord {\n  displayOptions\n  title\n  subtitle\n  questions {\n    question\n    id\n    answer {\n      value\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "fragment FeatureListSection on FeatureListSectionRecord {\n  featuresHeader\n  featuresSubheader\n  displayOption\n  feature {\n    __typename\n    id\n    featureTitle\n    featureDescription\n    featureIcon {\n      responsiveImage {\n        ...DatoImage_responsiveImage\n      }\n    }\n  }\n}"): (typeof documents)["fragment FeatureListSection on FeatureListSectionRecord {\n  featuresHeader\n  featuresSubheader\n  displayOption\n  feature {\n    __typename\n    id\n    featureTitle\n    featureDescription\n    featureIcon {\n      responsiveImage {\n        ...DatoImage_responsiveImage\n      }\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "fragment FeaturedPostsSection on FeaturedPostsSectionRecord {\n  featuredPostsHeader\n  featuredPostsSubheader\n  displayOptions\n  featuredPosts {\n    id\n    ...PostExcerpt\n  }\n}"): (typeof documents)["fragment FeaturedPostsSection on FeaturedPostsSectionRecord {\n  featuredPostsHeader\n  featuredPostsSubheader\n  displayOptions\n  featuredPosts {\n    id\n    ...PostExcerpt\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "fragment HeroSection on HeroSectionRecord {\n  buttons {\n    id\n    label\n    primary\n    url\n  }\n  heroSubtitle\n  heroTitle\n  displayOptions\n  heroImage {\n    responsiveImage {\n      ...DatoImage_responsiveImage\n    }\n  }\n}"): (typeof documents)["fragment HeroSection on HeroSectionRecord {\n  buttons {\n    id\n    label\n    primary\n    url\n  }\n  heroSubtitle\n  heroTitle\n  displayOptions\n  heroImage {\n    responsiveImage {\n      ...DatoImage_responsiveImage\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "fragment NewsletterSubscription on NewsletterSubscriptionRecord {\n  buttonLabel\n  subtitle\n  title\n}"): (typeof documents)["fragment NewsletterSubscription on NewsletterSubscriptionRecord {\n  buttonLabel\n  subtitle\n  title\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "fragment PricingSection on PricingSectionRecord {\n  pricingSectionHeader\n  pricingSectionSubheader\n  displayOption\n  plans {\n    id\n    yearlyPrice\n    monthlyPrice\n    tierName\n    tierDescription {\n      value\n    }\n    slug\n    planFeatures\n  }\n}"): (typeof documents)["fragment PricingSection on PricingSectionRecord {\n  pricingSectionHeader\n  pricingSectionSubheader\n  displayOption\n  plans {\n    id\n    yearlyPrice\n    monthlyPrice\n    tierName\n    tierDescription {\n      value\n    }\n    slug\n    planFeatures\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "fragment ReviewSection on ReviewSectionRecord {\n  reviewSectionHeader\n  reviewSectionSubheader\n  displayOptions\n  reviews {\n    id\n    ...Testimonial\n  }\n}\n\nfragment Testimonial on TestimonialRecord {\n  id\n  rating\n  review {\n    value\n  }\n  reviewerName\n  reviewerPicture {\n    responsiveImage {\n      ...DatoImage_responsiveImage\n    }\n  }\n  reviewerTitle\n}"): (typeof documents)["fragment ReviewSection on ReviewSectionRecord {\n  reviewSectionHeader\n  reviewSectionSubheader\n  displayOptions\n  reviews {\n    id\n    ...Testimonial\n  }\n}\n\nfragment Testimonial on TestimonialRecord {\n  id\n  rating\n  review {\n    value\n  }\n  reviewerName\n  reviewerPicture {\n    responsiveImage {\n      ...DatoImage_responsiveImage\n    }\n  }\n  reviewerTitle\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "fragment StatsSection on StatsSectionRecord {\n  title\n  subtitle\n  statistic {\n    id\n    label\n    quantity\n    icon {\n      url\n    }\n  }\n}"): (typeof documents)["fragment StatsSection on StatsSectionRecord {\n  title\n  subtitle\n  statistic {\n    id\n    label\n    quantity\n    icon {\n      url\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "fragment TeamSection on TeamSectionRecord {\n  displayOptions\n  title\n  subtitle\n  showcasedMembers {\n    name\n    id\n    slug\n    bio\n    description\n    picture {\n      responsiveImage {\n        ...DatoImage_responsiveImage\n      }\n    }\n  }\n}"): (typeof documents)["fragment TeamSection on TeamSectionRecord {\n  displayOptions\n  title\n  subtitle\n  showcasedMembers {\n    name\n    id\n    slug\n    bio\n    description\n    picture {\n      responsiveImage {\n        ...DatoImage_responsiveImage\n      }\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "fragment VideoSection on VideoSectionRecord {\n  videoHeader\n  videoSubheader\n  video {\n    providerUid\n    provider\n    thumbnailUrl\n  }\n  videoThumbnail {\n    responsiveImage {\n      ...DatoImage_responsiveImage\n    }\n  }\n}"): (typeof documents)["fragment VideoSection on VideoSectionRecord {\n  videoHeader\n  videoSubheader\n  video {\n    providerUid\n    provider\n    thumbnailUrl\n  }\n  videoThumbnail {\n    responsiveImage {\n      ...DatoImage_responsiveImage\n    }\n  }\n}"];

export function graphql(source: string) {
  return (documents as any)[source] ?? {};
}

export type DocumentType<TDocumentNode extends DocumentNode<any, any>> = TDocumentNode extends DocumentNode<  infer TType,  any>  ? TType  : never;